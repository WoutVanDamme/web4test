import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import BlogPostService from '@/service/BlogPostService'
import { useEffect, useState } from 'react'
import { BlogPost } from '@/types/BlogTypes'
import BlogPostOverview from '../../components/BlogPostOverview'
import Link from "next/link";
import UserService from '@/service/UserService'
import Header from '@/components/header'

export default function Home() {



    const [posts, setPosts] = useState<Array<BlogPost>>()
    const [error, setError] = useState<string>()
    const [filtertag, setFiltertag] = useState("");
    const [filter, setFilter] = useState<boolean>(false);

    const getPosts = async () => {

      

    
      try {

        let oega;
        if(filter && filter !== null && filtertag !== "") {
          oega = await BlogPostService.getPostWithTag(filtertag);
        }else {
          oega = await BlogPostService.getAllBlogPosts();
        }
        
        const response = oega as Response;
    
        if (!response.ok) {
          if (response.status === 401) {
            setError("Unauthorized Error");
          } else {
            const a = await response.json();
            if(a) {
              setError(a.penalty);
            }else{
              setError(response.statusText);
            }

            
          }
        } else {

          const arrayposts = await response.json();
          setPosts(arrayposts);
          setError("");
        }
      } catch (error) {
        setError("An error occurred");
      }
    };
    
    
    const handleFilterSubmit = async () => {
      
      try {
        const oega = await BlogPostService.getPostWithTag(filtertag);
        const response = oega as Response;
    
        if (!response.ok) {
          if (response.status === 401) {
            setError("Unauthorized Error");
          } else {
            setError(response.statusText);
          }
        } else {
          const arrayposts = await response.json();
          setPosts(arrayposts);
          setFilter(true);

        }
      } catch (error) {
        setError("An error occurred");
      }
    }


    useEffect(()=>{getPosts()}, [filter, filtertag])

    useEffect(() => {
            
      let id = setInterval(() => {

        getPosts();
        
          
      }, 1000);
      return () => clearInterval(id);
    }, [filter, filtertag]);
  



  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <Header></Header>
      
      <p>
        <Link className="btn btn-success" href="/CreatePost">Create Post</Link>
      </p>
      

          
        <div>
          <form
            onSubmit={(e) => {
              handleFilterSubmit();
              e.preventDefault();
            }}
          >
            <input
              type="text"
              name="Tag"
              placeholder="Tag"
              className="form-control mb-2"
              onChange={(e) => setFiltertag(e.target.value)}
            />
            <input type="submit" value="Filter Tag" className="btn btn-primary" />
          </form>
          <button className="btn btn-danger mr-2" onClick={() => setFilter(false)}>Remove Filter</button>
        </div>
      

      <BlogPostOverview posts={posts as BlogPost[]} />
      {error && <div className='text-danger'>{error}</div>}

    </>
  )
}
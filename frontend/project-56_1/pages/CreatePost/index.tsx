import BlogPostService from '@/service/BlogPostService';
import router from "next/router";
import Head from 'next/head';
import React, { useState } from 'react';

export default function Home() {
  const commonTags = ['Meme', 'Pet', 'Scenery', 'Other'];

  const [title, setTitle] = useState("");
  const [text, setText] = useState("");
  const [titleError, setTitleError] = useState("");
  const [textError, setTextError] = useState("")
  const [createError, setCreateError] = useState("");
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [image, setImage] = useState<File | null>(null);

  const validation = () => {
    setTitleError("");
    setTextError("");
    var result = true;
    if (!title || title.trim() === "") {
      setTitleError("Title is required");
      result = false;
    }
    if (!text || text.trim() === "") {
      setTextError("Text is required");
      result = false;
    }
    return result;
  };

  const handleTagChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const tag = e.target.value;
    if (e.target.checked) {
      setSelectedTags((prevSelectedTags) => [...prevSelectedTags, tag]);
    } else {
      setSelectedTags((prevSelectedTags) =>
        prevSelectedTags.filter((selectedTag) => selectedTag !== tag)
      );
    }
  };
  
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedImage = e.target.files?.[0];
    if (selectedImage) {
      setImage(selectedImage);
    }
  };
  
  const handleSubmit = async (event: { preventDefault: () => void; }) => {
    event.preventDefault();
    if (!validation()) return;

    const response = await BlogPostService.addBlogPost(title, text, selectedTags) as Response;

    if (response === undefined) {
      setCreateError("U do not have the propper rights to do this");
      return;
    }
    const data = await response.json();



    if (response instanceof Response) {
      if (response.status === 201) {
        if (image) {
          const id = data.out.postID;
          const addfileRes = await BlogPostService.addFile(id, image);
        }

        setTimeout(() => {
          router.push("/Blog/");
        });
      } else {
        setCreateError("Couldn't create post, all fields are required");
      }
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container">
        <form onSubmit={handleSubmit} className="mt-4">
          <div className="mb-3">
            <input type="text" name="title" className="form-control" placeholder="Title" value={title} onChange={(e) => setTitle(e.target.value)} />
            {titleError && <div className='text-danger'>{titleError}</div>}
          </div>
          <div className="mb-3">
            <textarea name="text" className="form-control" placeholder="Text" value={text} onChange={(e) => setText(e.target.value)} />
            {textError && <div className='text-danger'>{textError}</div>}
          </div>
          <div className="mb-3">
            <label className="form-label">Tags:</label>
            {commonTags.map((tag) => (
              <div key={tag} className="form-check form-check-inline">
                <input
                  type="checkbox"
                  id={tag}
                  value={tag}
                  checked={selectedTags.includes(tag)}
                  className="form-check-input"
                  onChange={handleTagChange}
                />
                <label htmlFor={tag} className="form-check-label">{tag}</label>
              </div>
            ))}
          </div>
          <div className="mb-3">
            <label className="form-label">Image:</label>
            <input type="file" name="image" className="form-control" onChange={handleImageChange} />
          </div>
          {createError && <div className='text-danger'>{createError}</div>}
          <button type="submit" className="btn btn-primary">Make post</button>
        </form>
      </div>
    </>
  );
}
